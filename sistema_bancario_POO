from abc import ABC, abstractclassmethod, abstractproperty
from datetime import datetime

class cliente:
    def __init__(self, endereco):
        self.endereco = endereco
        self.contas = []

    def realizar_transacao(self, conta, transacao):
        transacao.registrar(conta)

    def adicionar_conta(self, conta):
        self.contas.append(conta)

class pessoa_fisica(cliente):
    def __init__(self, nome, cpf, data_nascimento, endereco):
        super().__init__(endereco)
        self.nome = nome
        self.cpf = cpf
        self.data_nascimento = data_nascimento


class conta:
    def __init(self, cliente, numero):
        self._cliente = cliente
        self._numero = numero
        self._agencia = "0001"
        self._saldo = 0
        self._historico = historico()


    @classmethod
    def nova_conta(cls, cliente, numero):
        return cls(cliente, numero)

    @property
    def saldo(self):
        return self._saldo

    @property
    def numero(self):
        return self._numero

    @property
    def agencia(self):
        return self._agencia

    @property
    def cliente(self):
        return self._cliente

    @property
    def historico(self):
        return self._historico

    def sacar(self, valor):
        saldo = self.saldo
        excedeu_saldo = valor > saldo

        if excedeu_saldo:
            print("Saldo insuficiente")

        elif valor > 0:
            self._saldo -= valor
            print("Saque realizado com sucesso")
            return True

        else:
            print("Valor invÃ¡lido, tente novamente")

        return False
class conta_corrente(conta):
    def __init__(self, numero, cliente, limite = 500, limite_saque = 3):
        super().__init__(numero, cliente)
        self.limite = limite
        self.limite_saque = limite_saque

    def sacar(self,valor):
        numero_saque = len(
            [transacao for transacao in self.historico.transacoes if transacao["tipo"] == saque.__name__]
        )

        excedeu_limite = valor > self.limite
        excedeu_saque = numero_saque >= self.limite_saque

        if excedeu_limite:
            print("Erro,limite diario de saque excedido")

        elif excedeu_saque:
            print("Erro,numero de saque excedido")

        else:
            return super().sacar(valor)

        return False

    def __str__(self):
        return f"""
        agencia:{self.agencia}\n
        c/c:{self.numero}\n
        titular:{self.cliente.nome}\n
        """

class historico:
    def __init__(self):
        self._transacoes = []

    @property
    def transacoes(self):
        return self._transacoes

    def adicionar_transacoes(self, transacao):
       self._transacoes.append(
           {
            "tipo": transacao.__clas__.__name__,
            "valor": transacao.valor,
            "data": datetime.now().strftime("%d-%m-%y  %H:%M")
           }
       )

class transacao(ABC):
    @property
    @abstractproperty
    def valor(self):
        pass

    abstractclassmethod
    def registrar(self,conta):
        pass


class saque(transacao):
    def __init__(self, valor):
        self._valor = valor

    @property
    def valor(self):
        return self._valor

    def registrar(self,conta):
        sucesso_transacao = conta.sacar(self.valor)

        if sucesso_transacao:
            conta.historico.adicionar_transacao(self)

class deposito(transacao):
    def __init__(self, valor):
        self._valor = valor

    @property
    def valor(self):
        return self._valor

    def registrar(self, conta):
        sucesso_transacao = conta.depositar(self.valor)

        if sucesso_transacao:
            conta.historico.adicionar_transacao(self)
